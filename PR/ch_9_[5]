Chapter 9 -- Structs -- [maps to Chapter 5 in TRPL]

- Structs group together related pieces of data, allowing you to work with them as a unit ...

        struct GrayscaleMap {
            pixels: Vec<u8>,
            size: (usize, usize),
        }

- Structs are private by default, but can be made public ...

        // public struct, private fields
        pub struct GrayscaleMap {
            pixels: Vec<u8>,
            size: (usize, usize),
        }

        // public struct, public fields
        pub struct GrayscaleMap {
            pub pixels: Vec<u8>,
            pub size: (usize, usize),
        }

- There are three kinds of structs in Rust

    1. Named-field structs (like `GrayscaleMap` above)
    2. Tuple-like structs -- named tuples, but don't have named fields

        struct GrayscaleMap(Vec<u8>, (usize, usize));

    3. Unit structs -- contain no data and take up no memory

        struct GrayscaleMap;

    - which type you should use depends on context; named-field structs may be more verbose, but also more clear

- Methods are defined in `impl` blocks ...

        pub struct Queue {
            older: Vec<char>,
            younger: Vec<char>,
        }

        impl Queue {
            pub fn push(&mut self, c: char) {
                self.younger.push(c);
            }

            pub fn pop(&mut self) -> Option<char> {
                if self.older.is_empty() {
                    if self.younger.is_empty() {
                        return None
                    }

                    use std::mem::swap;
                    swap(&mut self.older, &mut self.younger);
                    self.older.reverse();
                }

                self.older.pop()
            }
        }

- Methods take the instance as `self` in one of three forms ...

    1. `self` = consume the instance, move it out to the caller
    2. `&self` = borrow a read-only reference to the instance
    3. `&mut self` = borrow a mutable reference to the instance

- Methods that don't take `self` are called static methods or associated functions ...

        impl Queue {
            pub fn new() -> Self {
                Queue {
                    older: Vec::new(),
                    younger: Vec::new(),
                }
            }
        }

    - it's conventional for constructors to be named `new()`, as above
    - to call these functions, use `::` namespaced under the struct type, i.e. ...

        let q = Queue::new();

- Structs can be generic ...

        "for any type T, a Queue<T> is two fields of type Vec<T>"

        struct Queue<T> {
            older: Vec<T>,
            younger: Vec<T>,
        }

    ... and then to implement methods ...

        impl<T> Queue<T> {
            pub fn push(&mut self, t: T) {
                self.younger.push(t);
            }
        }

- Structs can also contain references, and you must name the references lifetimes ...

        struct Extrema<'a> {
            least: &'a i32,
            greatest: &'a i32,
        }

    - Structs containing references cannot outlive the data they are referencing

- You can derive common traits for structs and, if possible, Rust will implement the traits for you automatically,
unless you want custom behavior.  Just add the #[derive] attribute as below ...

        #[derive(Clone, Copy, Debug, PartialEq)]
        struct Point {
            x: f64, 
            y: f64,
        }

- it is not uncommon to want immutable structs that have a fields requiring mutability.  In these cases, 
Cell<T> and RefCell<T> are useful types.

- Cell<T> offers `get` and `set` methods that allow you to set the field ...

        use std::cell::Cell;

        struct Sensor {
            ...
            error_count: Cell<u32>,
            ...
        }

        impl Sensor {
            pub fn increment_error(&self) {
                let n = self.error_count.get();
                self.error_count.set(n + 1);
            }

            pub fn has_errors(&self) -> bool {
                self.error_count.get() > 0
            }
        }
    
    - this is weird!  It seems to break Rust's rules around mutability -- the methods on `Sensor` don't take &mut self. 
    But this is the whole point of Cell<T>.

- Cell<T> cannot borrow references to the data it holds.  Instead, use RefCell<T>, which has the following methods ...

        RefCell::new(value)

        ref_cell.borrow() // returns Ref<T>, a shared reference to the value stored in `ref_cell`

        ref_cell.borrow_mut() // returns RefMut<T>, a mutable reference to the value in `ref_cell`

