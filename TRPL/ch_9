Chapter 9 -- Error Handling

- Rust's commitment to robustness and safety extends to great error handling 

- At a high level there are two kinds of errors ...

    1. Errors you can recover from
    2. Errors you can't recover from 

- To handle errors you can't recover from, the panic!() macro is useful for immediately exiting your program ... 

        let greeting = String::from("hello");

        if greeting.len() > 3 {
            panic!("ah, that's too long!");
        }

- Panicking is a good idea if your program is in an unrecoverable state, say it was given bad input and your code doesn't know what to do 
- However many errors may be expected to happen, and you should design your program to handle those gracefully
- For these kinds of errors, the Result<T, E> enum is how you can handle errors in Rust code 

- The Result<T, E> enum is generic over T and E, and has two variants ...

        enum Result<T, E> {
            Ok(T), // Success!
            Err(E), // Error!
        }

- Consider some code that might fail, say trying to open a file that doesn't exist ... 

        use std::fs::File;

        fn main() {
            let f = File::open("hello.txt");

            let f = match f {
                Ok(file) => file,
                Err(error) => panic!("problem opening the file: {:?}", error),
            };
        }

- A function could fail for a number of different reasons ... 

        use std::fs::File;
        use std::io::ErrorKind;

        fn main() {
            let f = File::open("hello.txt");

            let f = match f {
                Ok(file) => file,
                Err(error) => match error.kind() {
                    ErrorKind::FileNotFound => match File::create("hello.txt") {
                        Ok(fc) => fc,
                        Err(e) => panic!("error creating the file: {:?}", e),
                    },
                    other_error => panic!("error opening the file: {:?}", other_error),
                },
            };
        }

    - but this is getting tedious, there's a better way to write this with closures ...

        fn main() {
            let f = File::open("hello.txt").unwrap_or_else(|error| {
                if error.kind() == ErrorKind::FileNotFound {
                    File::create("hello.txt").unwrap_or_else(|error| {
                        panic!("error creating file: {:?}", error);
                    })
                } else {
                    panic!("error opening the file: {:?}", error);
                }
            });
        }

    - Result has helpful methods, .unwrap() and .expect() to make this a bit quicker ...

        let f = File::open("hello.txt").unwrap(); // unwrap the Result, this will panic if there is an Error!

        let f = File::open("hello.txt").expect("failed to open the file"); // pass a custom message to the panic! that .expect() will call if the file can't be opened

    - Rust allows you to propagate errors in a function that returns Result.  Consider ...

        fn open_and_read_file() -> Result<String, io::Error> {
            let f = File::open("hello.txt");

            let f = match f {
                Ok(file) => file,
                Err(e) => return Err(e),
            };

            let mut s = String::new();

            match f.read_to_string(&mut s) {
                Ok(_) => Ok(s),
                Err(e) => Err(e),
            }
        }

    - This is great!  But we can use some awesome shortcuts, namely the `?` operator ...

        fn open_and_read_file() -> Result<String, io::Error> {
            let f = File::open("hello.txt")?;
            let mut s = String::new();
            f.read_to_string(&mut s)?;
            Ok(s)
        }

    - ... or we can chain these together

        fn open_and_read_file() -> Result<String, io::Error> {
            let mut s = String::new();

            File::open("hello.txt")?.read_to_string(&mut s)?;

            Ok(s)
        }

    - Note!  Since `?` is propagating errors up to the calling code, it can only be used inside functions that return Result 