Chapter 8 -- Common Collections

- There are three kinds of Collection types covered in this chapter, that are central to Rust

    1. Vectors (Vec<T>)
    2. Strings (String and str)
    3. HashMaps (HashMap<T, V>)

- All of these types store data on the heap, are dynamic in size, and grow-able.

Vectors

- Vec<T>'s are great for grouping a variable amount of related data, like prices in a shopping cart.
- Vec<T>'s are generic over the type T -- we'll cover generics in a future chapter.

- To create a Vector, use the `new()` constructor or the `vec![]` macro ... 

        let v: Vec<i32> = Vec::new();

        let z = vec![1, 2, 3, 4, 5];

    - note in the declaration of v, we annotated the type of the Vector.  But this is not usually necessary as Rust can infer the type.

- You can add items to the Vec with the `push()` method ...

        let mut v = vec![1, 2, 3];
        v.push(4);
        v.push(5);

- If you need to group together different types of data in a Vector, an Enum could be useful ...

        enum ShoppingCart {
            Price(f32),
            Category(String)
            Full(bool)
        }

        let cart = vec![
            ShoppingCart::Price(8.64),
            Category("Vegetables".to_string()),
            Full(false)
        ];

- However if you don't know the full set of potential data types ahead of time the enum method won't work.  Instead, you can 
use trait objects, which will be covered in a later chapter.

- To index into a vector and get a specific element, there are two ways of doing that ...

        let v = vec![1, 2, 3, 4, 5];

        let second = &v[1];  // returns reference to the second element, panics if out of range!
        let third = v.get(2); // safer way to index a Vec, returns Option<&T>!  Some(&T) if the index exists, and None otherwise

- To iterate through a vector ...

        let v: vec![1, 2, 3, 4, 5];

        for i in &v {
            // do stuff
        }

        for i in &mut v {
            // now you can mutate items in the vector
        }

- There are dozens of useful methods on the Vector type, like `pop()` for example!  Check the docs!

Strings

- Strings are much more complex than they might at first seem!
- there is not one, but two primary String types ...

    1. String
        - owned, heap allocated
    2. str
        - string slice, usually borrowed (&str)

- String literals are actually string slices ...

        let greeting = "hello world";
        let greeting = "hello world".to_string();

- Indexing into strings doesn't actually work, because it's not always trivial how a String is represented
in memory.
    - A character might be one byte, or multiple bytes.  Rust makes the programmer deal with this complexity.

- If you need to get at specific elements of a String, it's usually best to iterate through it ...

        let greeting = "hello world".to_string();

        for ch in greeting.chars() { ... }
        for byte in greeting.bytes() { ... }

- the `format!` macro is a helpful utility for formatting Strings.  It works like `println!`, but instead of writing to 
stdout it creates a String.

        let first_name = "Ferris";
        let last_name = "the Crab";

        let full_name = format!("{} {}", first_name, last_name);

HashMaps

- HashMaps are like associative arrays, HashTables, Dictionaries, or maps.  They allow you to store data as a key, value pair.
- HashMaps are a little less common than Strings and Vectors, so you need to explicitly bring them into scope ...

        use std::collections::HashMap;

        let map = HashMap::new();

- there also 

- You can insert data into a HashMap using the `insert()` method ...

        let map: HashMap<String, u32> = HashMap::new();

        map.insert("a".to_string(), 1);
        map.insert("b".to_string(), 2);

- The Entry API is extremely useful for getting and updating values in a map.

        let mut word_counts = HashMap::new();

        // get the associated value for `"hello"` or insert 0
        // then increment the value by 1
        let mut counter = word_counts.entry("hello").or_insert(0);
        *counter += 1;

- Iterate through the <key, value> pairs in a HashMap as follows ...

        for (key, value) in &map {
            // do stuff 
        }

- as with Vectors and Strings, there are many useful methods for working with HashMaps!  Regularly peruse the docs to 
keep these fresh in your mind.